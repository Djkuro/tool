if (!window.hasRunAutoFarm) {
  window.hasRunAutoFarm = true;
  console.log("üöÄ Sunflower Land Auto Farm ƒë√£ kh·ªüi ƒë·ªông.");

  let toolRunning = false;
  let toolInterval = null;

  // L·∫Øng nghe t√≠n hi·ªáu t·ª´ popup.js
  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      if (message.action === "startTool") {
          startTool();
      } else if (message.action === "stopTool") {
          stopTool();
      }
  });

  function startTool() {
      if (toolRunning) return;
      toolRunning = true;
      console.log("üöÄ Tool ƒëang ch·∫°y...");

      toolInterval = setInterval(() => {
          if (!toolRunning) return; // Ch·ªâ ch·∫°y n·∫øu toolRunning = true

          console.log("üåæ Auto farm ƒëang ho·∫°t ƒë·ªông...");
          // ‚û§ Ch·∫°y tool ·ªü ƒë√¢y
          // H√†m random kho·∫£ng th·ªùi gian ki·ªÉm tra
async function startRandomInterval() {
  while (true) {
    const randomDelay = Math.floor(Math.random() * 9000) + 1000; // T·ª´ 1s ƒë·∫øn 10s
    console.log(`‚è≥ Ki·ªÉm tra t·ª± ƒë·ªông sau ${randomDelay / 1000} gi√¢y...`);

    await new Promise((resolve) => setTimeout(resolve, randomDelay));

    await selectSeed([1, 2, 3]);
    await randomDelayBetweenFunctions();
    await handlePlantClick(); // Ch·ªù h√†m n√†y ch·∫°y xong r·ªìi m·ªõi ti·∫øp t·ª•c
    // await randomDelayBetweenFunctions();
    // await handleCooking();
  }
}

// H√†m t·∫°o ƒë·ªô tr·ªÖ ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn 3 gi√¢y gi·ªØa c√°c h√†m
async function randomDelayBetweenFunctions() {
  const delay = Math.floor(Math.random() * 2000) + 1000;
  console.log(`‚è≥ Ch·ªù ${delay / 1000} gi√¢y tr∆∞·ªõc khi ch·∫°y h√†m ti·∫øp theo...`);
  await new Promise((resolve) => setTimeout(resolve, delay));
}

// Ch·∫°y ki·ªÉm tra l·∫ßn ƒë·∫ßu
startRandomInterval();

// H√†m ch√≠nh x·ª≠ l√Ω h√¨nh ·∫£nh
async function handlePlantClick() {
  console.log("üîç Ki·ªÉm tra t·∫•t c·∫£ ·∫£nh plant.png ho·∫∑c soil2.png...");

  let images = Array.from(document.querySelectorAll("img")).filter(
    (img) => img.src.includes("plant.png") || img.src.includes("soil2.png")
  );

  if (images.length === 0) {
    console.log("‚úÖ Kh√¥ng c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, d·ª´ng l·∫°i!");
    return;
  }

  images = images.sort(() => Math.random() - 0.5);

  for (const img of images) {
    const parent = img.closest("div");
    if (!parent) continue;

    if (img.src.includes("plant.png")) {
      console.log("üå± Click v√†o plant.png");
      simulateRandomClick(img);

      await new Promise((resolve) => setTimeout(resolve, 300));

      const newImg = parent.querySelector("img");
      if (newImg && newImg.src.includes("soil2.png")) {
        console.log("üü§ ƒê√£ ƒë·ªïi th√†nh soil2.png, ti·∫øp t·ª•c click...");
        await clickSoil2(newImg);
      } else {
        console.log("üå± V·∫´n l√† plant.png, click l·∫ßn n·ªØa...");
        simulateRandomClick(img);
        await new Promise((resolve) => setTimeout(resolve, 300));
      }
    } else if (img.src.includes("soil2.png")) {
      console.log("üü§ T√¨m th·∫•y soil2.png, x·ª≠ l√Ω t·ª´ng c√°i m·ªôt...");
      await clickSoil2(img);
    }

    const fixedContainer = document.querySelector(
      ".fixed.inset-0.overflow-y-auto"
    );
    if (fixedContainer) {
      console.log("üîÑ Ph√°t hi·ªán menu ƒë·∫∑c bi·ªát, x·ª≠ l√Ω ti·∫øp...");
      await handleFixedElement();
      await randomDelayBetweenFunctions();
      await handleMoonSeekers();
      console.log("‚úÖ Ho√†n th√†nh x·ª≠ l√Ω menu.");
    }

    await randomDelayBetweenFunctions();
  }
}

// ch·ªçn h·∫°t gi·ªëng
async function selectSeed(seedOrder) {
  console.log("üõí ƒêang t√¨m Market...");

  const marketImage = document.querySelector("img[src*='market.webp']");
  if (!marketImage) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y Market, d·ª´ng l·∫°i!");
    return;
  }

  marketImage.click();
  console.log("‚úÖ ƒê√£ click v√†o Market");

  await new Promise((resolve) => setTimeout(resolve, 1000));

  const seedElements = document.querySelectorAll(
    ".fixed.inset-0.overflow-y-auto .flex.flex-wrap.mb-2 > .relative"
  );
  if (seedElements.length === 0) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch h·∫°t gi·ªëng, d·ª´ng l·∫°i!");
    return;
  }

  for (let seedIndex of seedOrder) {
    let seedElement = seedElements[seedIndex - 1];
    if (!seedElement) {
      console.log(
        `‚ö†Ô∏è H·∫°t gi·ªëng s·ªë ${seedIndex} kh√¥ng t·ªìn t·∫°i trong danh s√°ch!`
      );
      continue;
    }

    let stockDiv = seedElement.querySelector(
      ".w-fit.justify-center.flex.items-center.text-xs"
    );
    if (!stockDiv || stockDiv.textContent.trim() === "0") {
      console.log(`‚ùå H·∫øt h·∫°t gi·ªëng s·ªë ${seedIndex}, th·ª≠ lo·∫°i kh√°c...`);
      continue;
    }

    let cropImage = seedElement.querySelector("img[src*='crop.png']");
    if (!cropImage) {
      console.log(
        `‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh crop.png trong h·∫°t gi·ªëng s·ªë ${seedIndex}, b·ªè qua.`
      );
      continue;
    }

    cropImage.click();
    console.log(`‚úÖ ƒê√£ ch·ªçn h·∫°t gi·ªëng s·ªë ${seedIndex}`);

    setTimeout(() => {
      const closeButton = document.querySelector(
        "img[src='https://sunflower-land.com/game-assets/icons/close.png']"
      );
      if (closeButton) {
        closeButton.click();
        console.log("‚ùå ƒê√£ ƒë√≥ng Market");
      } else {
        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t ƒë√≥ng Market");
      }
    }, 500);

    await randomDelayBetweenFunctions();
    return;
  }

  console.log(
    "‚ùå T·∫•t c·∫£ h·∫°t gi·ªëng trong danh s√°ch ƒë·ªÅu h·∫øt h√†ng ho·∫∑c kh√¥ng h·ª£p l·ªá!"
  );
}

async function handleCooking() {
  // T√¨m Fire Pit v·ªõi ·∫£nh ch·ª©a "fire_pit.webp" (b·ªè qua ph·∫ßn winter/)
  const firePitContainer = Array.from(
    document.querySelectorAll(
      ".relative.w-full.h-full.cursor-pointer.hover\\:img-highlight"
    )
  ).find((container) => {
    const img = container.querySelector("img");
    return img && img.src.includes("fire_pit.webp"); // Ki·ªÉm tra URL c√≥ ch·ª©a fire_pit.webp hay kh√¥ng
  });

  if (!firePitContainer) {
    console.log("üî• Kh√¥ng t√¨m th·∫•y Fire Pit, ki·ªÉm tra l·∫°i sau 10 gi√¢y...");
    return;
  }

  console.log("üî• T√¨m th·∫•y Fire Pit! Click ƒë·ªÉ m·ªü menu n·∫•u ƒÉn...");
  firePitContainer.dispatchEvent(new MouseEvent("click", { bubbles: true }));

  // Ch·ªù 1 gi√¢y ƒë·ªÉ giao di·ªán m·ªü ra
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Ki·ªÉm tra menu c√≥ m·ªü ra kh√¥ng
  const recipeTitle = Array.from(
    document.querySelectorAll(".fixed.inset-0 .w-full")
  ).find((el) => el.textContent.trim() === "Recipes");

  if (!recipeTitle) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y menu Recipes, th·ª≠ l·∫°i sau...");
    return;
  }

  console.log("üìú ƒê√£ m·ªü menu Recipes!");

  // T√¨m danh s√°ch m√≥n ƒÉn
  const recipeContainer = recipeTitle.nextElementSibling;
  if (!recipeContainer || !recipeContainer.classList.contains("flex")) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y danh s√°ch m√≥n ƒÉn.");
    return;
  }

  // Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh "cancel.png"
  const cancelImages = Array.from(
    document.querySelectorAll(".fixed.inset-0 img")
  ).filter((img) => img.src.includes("cancel.png"));

  console.log(`üõë S·ªë l∆∞·ª£ng ·∫£nh cancel.png: ${cancelImages.length}`);

  // N·∫øu c√≥ 3 ·∫£nh "cancel.png", ƒë√≥ng menu ngay l·∫≠p t·ª©c
  if (cancelImages.length >= 3) {
    console.log(
      "‚ùå ƒê√£ ƒë·∫°t gi·ªõi h·∫°n m√≥n ƒÉn (3 m√≥n trong h√†ng ch·ªù), ƒë√≥ng menu..."
    );
    await closeMenu();
    return;
  }

  // Ch·ªçn m√≥n ƒÉn theo th·ª© t·ª±
  const dishNumber = 4;
  console.log(`üçΩ Ch·ªçn m√≥n s·ªë ${dishNumber}`);

  const dishes = recipeContainer.querySelectorAll(".relative .cursor-pointer");
  if (dishes.length >= dishNumber) {
    dishes[dishNumber - 1].dispatchEvent(
      new MouseEvent("click", { bubbles: true })
    );
    console.log("‚úÖ ƒê√£ ch·ªçn m√≥n ƒÉn!");
  } else {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn theo s·ªë ƒë√£ ch·ªçn.");
    return;
  }

  // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ giao di·ªán c·∫≠p nh·∫≠t
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Ki·ªÉm tra c√°c button ƒë·ªÉ b·∫•m theo th·ª© t·ª±
  const buttons = document.querySelectorAll(
    ".w-full.p-1.text-sm.object-contain.justify-center.items-center.hover\\:brightness-90"
  );

  if (!buttons.length) {
    console.log("‚ùå Kh√¥ng t√¨m th·∫•y button ph√π h·ª£p.");
    return;
  }

  // T·∫°o danh s√°ch theo th·ª© t·ª± ∆∞u ti√™n
  const buttonOrder = ["Cook", "Collect", "Add to queue"];

  for (const buttonText of buttonOrder) {
    // Ki·ªÉm tra l·∫°i ·∫£nh "cancel.png" tr∆∞·ªõc khi ti·∫øp t·ª•c b·∫•m n√∫t
    const cancelImagesNow = Array.from(
      document.querySelectorAll(".fixed.inset-0 img")
    ).filter((img) => img.src.includes("cancel.png"));

    console.log(
      `üîÑ Ki·ªÉm tra l·∫°i s·ªë l∆∞·ª£ng cancel.png: ${cancelImagesNow.length}`
    );

    if (cancelImagesNow.length >= 3) {
      console.log("üõë ƒê√£ c√≥ 3 m√≥n trong h√†ng ch·ªù, ƒë√≥ng menu...");
      await closeMenu();
      break; // Tho√°t v√≤ng l·∫∑p buttonOrder
    }

    // T√¨m n√∫t c·∫ßn b·∫•m
    const button = Array.from(buttons).find(
      (btn) => btn.innerText.trim() === buttonText
    );

    if (button && !button.disabled) {
      console.log(`‚úÖ B·∫•m v√†o n√∫t: ${buttonText}`);
      button.dispatchEvent(new MouseEvent("click", { bubbles: true }));

      // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi b·∫•m n√∫t ti·∫øp theo
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  }

  console.log("‚úÖ ƒê√£ ho√†n th√†nh b·∫•m t·∫•t c·∫£ c√°c n√∫t theo th·ª© t·ª±.");

  // ƒê√≥ng menu sau khi th·ª±c hi·ªán xong
  await closeMenu();
}

// H√†m ƒë√≥ng menu
async function closeMenu() {
  await new Promise((resolve) => setTimeout(resolve, 1000));

  const closeButton = Array.from(
    document.querySelectorAll(".fixed.inset-0 .absolute.flex img")
  ).find(
    (img) =>
      img.src === "https://sunflower-land.com/game-assets/icons/close.png"
  );

  if (closeButton) {
    console.log("‚ùå ƒê√≥ng menu b·∫±ng c√°ch b·∫•m v√†o n√∫t X");
    closeButton.dispatchEvent(new MouseEvent("click", { bubbles: true }));
  } else {
    console.log("‚ö† Kh√¥ng t√¨m th·∫•y n√∫t X ƒë·ªÉ ƒë√≥ng menu.");
  }
}

function simulateRandomClick(img) {
  const rect = img.getBoundingClientRect();
  const randomX = rect.left + Math.random() * rect.width;
  const randomY = rect.top + Math.random() * rect.height;

  console.log(
    `üéØ Click ng·∫´u nhi√™n v√†o X=${randomX.toFixed(2)}, Y=${randomY.toFixed(2)}`
  );

  img.dispatchEvent(
    new MouseEvent("click", {
      bubbles: true,
      clientX: randomX,
      clientY: randomY,
    })
  );
}

async function handleFixedElement() {
  console.log("üìå Ph√°t hi·ªán menu ƒë·∫∑c bi·ªát tr√™n trang!");

  const parent = document.querySelector(".fixed .relative.w-full.rounded-md");
  if (!parent) return;

  console.log("üìå ƒê√£ t√¨m th·∫•y ph·∫ßn t·ª≠ cha.");

  // L·∫•y t·∫•t c·∫£ th·∫ª img b√™n trong
  const imgs = parent.querySelectorAll("img");
  if (imgs.length < 2) return;

  // L·∫•y t·ªça ƒë·ªô c·ªßa ·∫£nh th·ª© 2
  const img2 = imgs[1];
  const rect = img2.getBoundingClientRect();

  console.log(`üñ± Click v√†o ·∫£nh t·∫°i X=${rect.left}, Y=${rect.top}`);
  img2.dispatchEvent(new MouseEvent("click", { bubbles: true }));

  // B·∫•m n√∫t "Close"
  clickCloseButton();
}

async function handleMoonSeekers() {
  const moonSeekersSpan = document.querySelector(
    ".fixed .flex.flex-col.justify-center span.text-center.mb-2"
  );

  if (moonSeekersSpan) {
    const text = moonSeekersSpan.textContent.toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ ki·ªÉm tra
    console.log(`üîç Ph√°t hi·ªán ti√™u ƒë·ªÅ: "${text}"`);

    let validSizes = [];

    if (text.includes("moon seekers")) {
      console.log("üü† X·ª≠ l√Ω Moon Seekers...");
      validSizes = [
        { width: 13, height: 16 },
        { width: 12, height: 16 },
        { width: 16, height: 17 },
        { width: 15, height: 16 },
        { width: 15, height: 17 },
        { width: 96, height: 64 },
        { width: 18, height: 16 },
        { width: 22, height: 25 },
        { width: 18, height: 29 },
        { width: 20, height: 19 },
        { width: 33, height: 28 },
        { width: 29, height: 28 },
        { width: 25, height: 25 },
      ];
    } else if (text.includes("goblins")) {
      console.log("üü¢ X·ª≠ l√Ω goblins...");
      validSizes = [
        { width: 96, height: 64 },
        { width: 18, height: 16 },
        { width: 22, height: 25 },
        { width: 18, height: 29 },
        { width: 20, height: 19 },
        { width: 33, height: 28 },
        { width: 29, height: 28 },
        { width: 25, height: 25 },
        { width: 26, height: 21 },
        { width: 18, height: 12 },
        { width: 25, height: 27 },
        { width: 24, height: 21 },
        { width: 19, height: 21 },
      ];
    }

    if (validSizes.length > 0) {
      // L·∫•y danh s√°ch ·∫£nh c·∫ßn ki·ªÉm tra
      const images = document.querySelectorAll(
        ".fixed .flex.flex-col.justify-center .flex.flex-wrap.justify-center.items-center img"
      );

      for (let img of images) {
        const width = img.naturalWidth;
        const height = img.naturalHeight;

        if (
          validSizes.some(
            (size) => size.width === width && size.height === height
          )
        ) {
          console.log(`üñ± Click v√†o ·∫£nh c√≥ k√≠ch th∆∞·ªõc ${width}x${height}`);
          img.dispatchEvent(new MouseEvent("click", { bubbles: true }));

          // Ch·ªù 500ms gi·ªØa m·ªói l·∫ßn click ƒë·ªÉ ƒë·∫£m b·∫£o hi·ªáu ·ª©ng ho√†n t·∫•t
          await new Promise((resolve) => setTimeout(resolve, 500));
        }
      }
    }

    // G·ªçi function b·∫•m n√∫t Close
    clickCloseButton();
  }
}

function clickCloseButton() {
  setTimeout(() => {
    const closeButton = Array.from(
      document.querySelectorAll(".fixed button")
    ).find((btn) => btn.textContent.trim() === "Close");

    if (closeButton) {
      console.log("‚ùå Click v√†o n√∫t Close.");
      closeButton.dispatchEvent(new MouseEvent("click", { bubbles: true }));

      // Ki·ªÉm tra l·∫°i sau khi b·∫•m Close
      setTimeout(() => {
        const remainingImages = Array.from(
          document.querySelectorAll("img")
        ).filter(
          (img) =>
            img.src.includes("plant.png") || img.src.includes("soil2.png")
        );

        if (remainingImages.length > 0) {
          console.log("üîÑ V·∫´n c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, ti·∫øp t·ª•c...");
          handlePlantClick();
        } else {
          console.log("‚úÖ Kh√¥ng c√≤n ·∫£nh c·∫ßn x·ª≠ l√Ω, d·ª´ng l·∫°i!");
        }
      }, 1000); // Ch·ªù 1 gi√¢y ƒë·ªÉ trang c·∫≠p nh·∫≠t
    } else {
      console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y n√∫t Close.");
    }
  }, 1000);
}

async function clickSoil2(soilImg) {
  console.log("üñ± Click v√†o soil2.png...");
  soilImg.dispatchEvent(new MouseEvent("click", { bubbles: true }));
  await new Promise((resolve) => setTimeout(resolve, 300));
}

      }, 5000);
  }

  function stopTool() {
      if (!toolRunning) return;
      toolRunning = false;
      console.log("üõë Tool ƒë√£ t·∫Øt!");

      if (toolInterval !== null) {
          clearInterval(toolInterval);
          toolInterval = null;
      }

      // NgƒÉn m·ªçi h√†nh ƒë·ªông kh√°c ƒëang ch·∫°y
      let scripts = document.querySelectorAll("script");
      scripts.forEach((script) => {
          if (script.src.includes("content.js")) {
              script.remove();
          }
      });
  }
}
